[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "google_api",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "dapi",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "tg_token",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "bot_token",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "SimpleNamespace",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "JMusic.web",
        "description": "JMusic.web",
        "peekOfCode": "def home():\n    return \"Running\"",
        "detail": "JMusic.web",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "JMusic.web",
        "description": "JMusic.web",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef home():\n    return \"Running\"",
        "detail": "JMusic.web",
        "documentation": {}
    },
    {
        "label": "Basic",
        "kind": 6,
        "importPath": "src.commands.basic",
        "description": "src.commands.basic",
        "peekOfCode": "class Basic(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n        print(\"OK\")\n    @commands.Cog.listener()\n    async def on_command_error(self, ctx, error):\n        if isinstance(error, commands.MissingRequiredArgument):\n            await ctx.send(\"Bạn chưa nhập đủ tham số\")",
        "detail": "src.commands.basic",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "src.commands.basic",
        "description": "src.commands.basic",
        "peekOfCode": "def setup(bot):\n    bot.add_cog(Basic(bot))",
        "detail": "src.commands.basic",
        "documentation": {}
    },
    {
        "label": "Gemini",
        "kind": 6,
        "importPath": "src.commands.gemini",
        "description": "src.commands.gemini",
        "peekOfCode": "class Gemini:\n    def __init__(self, model_name: str = \"gemini-1.5-flash\"):\n        genai.configure(api_key=google_api)\n        self.generation_config = {\n            \"temperature\": 1,\n            \"top_p\": 0.95,\n            \"top_k\": 64,\n            \"max_output_tokens\": 8192,\n            \"response_mime_type\": \"text/plain\",\n        }",
        "detail": "src.commands.gemini",
        "documentation": {}
    },
    {
        "label": "GeminiCommands",
        "kind": 6,
        "importPath": "src.commands.gemini",
        "description": "src.commands.gemini",
        "peekOfCode": "class GeminiCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.gemini = Gemini()\n    @commands.slash_command()\n    async def pro(self, ctx):\n        await ctx.channel.trigger_typing()\n        self.gemini = Gemini(\"gemini-1.5-pro\")\n        await ctx.respond(\"Gemini 1.5 Pro\", delete_after=10)\n    @commands.slash_command()",
        "detail": "src.commands.gemini",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "src.commands.gemini",
        "description": "src.commands.gemini",
        "peekOfCode": "def setup(bot):\n    bot.add_cog(GeminiCommands(bot))",
        "detail": "src.commands.gemini",
        "documentation": {}
    },
    {
        "label": "TiktokDouyin",
        "kind": 6,
        "importPath": "src.commands.tiktokdouyin",
        "description": "src.commands.tiktokdouyin",
        "peekOfCode": "class TiktokDouyin(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_message(self, message):\n        if any(match in message.content for match in [\"tiktok\", \"douyin\"]):\n            await message.channel.trigger_typing()\n            url = re.search(r\"(?P<url>https?://[^\\s]+)\", message.content).group(\"url\")\n            r = requests.get(dapi, params={\"url\": url}, timeout=99).json()\n            dl_link = r.get(\"url\")",
        "detail": "src.commands.tiktokdouyin",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "src.commands.tiktokdouyin",
        "description": "src.commands.tiktokdouyin",
        "peekOfCode": "def setup(bot):\n    bot.add_cog(TiktokDouyin(bot))",
        "detail": "src.commands.tiktokdouyin",
        "documentation": {}
    },
    {
        "label": "secret",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "secret = requests.get(os.getenv(\"SECRET\"), timeout=99).text\nres = json.loads(secret, object_hook=lambda _: SimpleNamespace(**_))\ndapi = res.api.dapi.td\nbot_token = res.bot.contentdiscord\ntg_token = res.bot.tiktokdouyin\ngoogle_api = res.key.google_ai",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "res = json.loads(secret, object_hook=lambda _: SimpleNamespace(**_))\ndapi = res.api.dapi.td\nbot_token = res.bot.contentdiscord\ntg_token = res.bot.tiktokdouyin\ngoogle_api = res.key.google_ai",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "dapi",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "dapi = res.api.dapi.td\nbot_token = res.bot.contentdiscord\ntg_token = res.bot.tiktokdouyin\ngoogle_api = res.key.google_ai",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "bot_token",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "bot_token = res.bot.contentdiscord\ntg_token = res.bot.tiktokdouyin\ngoogle_api = res.key.google_ai",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "tg_token",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "tg_token = res.bot.tiktokdouyin\ngoogle_api = res.key.google_ai",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "google_api",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "google_api = res.key.google_ai",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "intents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(intents=intents)\n@bot.event\nasync def on_ready():\n    print(\"OK\")\nbot.load_extensions(\"commands\")\nbot.run(bot_token)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "intents.message_content = True\nbot = commands.Bot(intents=intents)\n@bot.event\nasync def on_ready():\n    print(\"OK\")\nbot.load_extensions(\"commands\")\nbot.run(bot_token)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "bot = commands.Bot(intents=intents)\n@bot.event\nasync def on_ready():\n    print(\"OK\")\nbot.load_extensions(\"commands\")\nbot.run(bot_token)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "def home():\n    return \"Running\"",
        "detail": "web",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef home():\n    return \"Running\"",
        "detail": "web",
        "documentation": {}
    }
]